% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot-seed.R
\name{with_seed}
\alias{with_seed}
\title{Seed Management for margot.core}
\usage{
with_seed(seed, expr, .rng_kind = NULL, .envir = parent.frame())
}
\arguments{
\item{seed}{Integer seed value}

\item{expr}{Expression to evaluate}

\item{.rng_kind}{Optional RNG kind (e.g., "L'Ecuyer-CMRG" for parallel)}

\item{.envir}{Environment to evaluate expression in}
}
\value{
The result of evaluating expr
}
\description{
Core functions for managing random seeds in a way that preserves
user state and ensures reproducibility. These functions form the
foundation for seed management across the margotsphere.
}
\details{
The functions in this file follow R best practices:
\itemize{
\item Always restore the user's RNG state
\item Use on.exit() for guaranteed cleanup
\item No global side effects
\item Simple function interface (no S3 classes needed)
Run Expression with Temporary Seed
}

Temporarily sets a random seed for reproducible execution without
affecting the global RNG state. This is the recommended way to
ensure reproducibility in margot workflows.
}
\examples{
# Original RNG state is preserved
set.seed(123)
x1 <- runif(1)

# Run with different seed
y <- with_seed(456, runif(5))

# Original state restored
x2 <- runif(1)
identical(x1, x2)  # Would be FALSE without state preservation
}
